/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: 
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FILEDIALOG_INTERFACE_H
#define FILEDIALOG_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.filemanager.filedialog
 */
class ComDeepinFilemanagerFiledialogInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.filedialog"; }

public:
    ComDeepinFilemanagerFiledialogInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ComDeepinFilemanagerFiledialogInterface();

    Q_PROPERTY(int acceptMode READ acceptMode WRITE setAcceptMode)
    inline int acceptMode() const
    { return qvariant_cast< int >(property("acceptMode")); }
    inline void setAcceptMode(int value)
    { setProperty("acceptMode", QVariant::fromValue(value)); }

    Q_PROPERTY(QString directory READ directory WRITE setDirectory)
    inline QString directory() const
    { return qvariant_cast< QString >(property("directory")); }
    inline void setDirectory(const QString &value)
    { setProperty("directory", QVariant::fromValue(value)); }

    Q_PROPERTY(QString directoryUrl READ directoryUrl WRITE setDirectoryUrl)
    inline QString directoryUrl() const
    { return qvariant_cast< QString >(property("directoryUrl")); }
    inline void setDirectoryUrl(const QString &value)
    { setProperty("directoryUrl", QVariant::fromValue(value)); }

    Q_PROPERTY(int filter READ filter WRITE setFilter)
    inline int filter() const
    { return qvariant_cast< int >(property("filter")); }
    inline void setFilter(int value)
    { setProperty("filter", QVariant::fromValue(value)); }

    Q_PROPERTY(int heartbeatInterval READ heartbeatInterval WRITE setHeartbeatInterval)
    inline int heartbeatInterval() const
    { return qvariant_cast< int >(property("heartbeatInterval")); }
    inline void setHeartbeatInterval(int value)
    { setProperty("heartbeatInterval", QVariant::fromValue(value)); }

    Q_PROPERTY(QStringList nameFilters READ nameFilters WRITE setNameFilters)
    inline QStringList nameFilters() const
    { return qvariant_cast< QStringList >(property("nameFilters")); }
    inline void setNameFilters(const QStringList &value)
    { setProperty("nameFilters", QVariant::fromValue(value)); }

    Q_PROPERTY(int viewMode READ viewMode WRITE setViewMode)
    inline int viewMode() const
    { return qvariant_cast< int >(property("viewMode")); }
    inline void setViewMode(int value)
    { setProperty("viewMode", QVariant::fromValue(value)); }

    Q_PROPERTY(bool windowActive READ windowActive)
    inline bool windowActive() const
    { return qvariant_cast< bool >(property("windowActive")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> accept()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("accept"), argumentList);
    }

    inline QDBusPendingReply<> activateWindow()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("activateWindow"), argumentList);
    }

    inline QDBusPendingReply<> deleteLater()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("deleteLater"), argumentList);
    }

    inline QDBusPendingReply<> hide()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("hide"), argumentList);
    }

    inline QDBusPendingReply<QString> labelText(int label)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(label);
        return asyncCallWithArgumentList(QStringLiteral("labelText"), argumentList);
    }

    inline QDBusPendingReply<> makeHeartbeat()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("makeHeartbeat"), argumentList);
    }

    inline QDBusPendingReply<> open()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("open"), argumentList);
    }

    inline QDBusPendingReply<> reject()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reject"), argumentList);
    }

    inline QDBusPendingReply<> selectFile(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filename);
        return asyncCallWithArgumentList(QStringLiteral("selectFile"), argumentList);
    }

    inline QDBusPendingReply<> selectNameFilter(const QString &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QStringLiteral("selectNameFilter"), argumentList);
    }

    inline QDBusPendingReply<> selectUrl(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QStringLiteral("selectUrl"), argumentList);
    }

    inline QDBusPendingReply<QStringList> selectedFiles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("selectedFiles"), argumentList);
    }

    inline QDBusPendingReply<QString> selectedNameFilter()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("selectedNameFilter"), argumentList);
    }

    inline QDBusPendingReply<QStringList> selectedUrls()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("selectedUrls"), argumentList);
    }

    inline QDBusPendingReply<> setFileMode(int fileMode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fileMode);
        return asyncCallWithArgumentList(QStringLiteral("setFileMode"), argumentList);
    }

    inline QDBusPendingReply<> setLabelText(int label, const QString &text)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(label) << QVariant::fromValue(text);
        return asyncCallWithArgumentList(QStringLiteral("setLabelText"), argumentList);
    }

    inline QDBusPendingReply<> setOptions(int options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("setOptions"), argumentList);
    }

    inline QDBusPendingReply<> setWindowTitle(const QString &title)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(title);
        return asyncCallWithArgumentList(QStringLiteral("setWindowTitle"), argumentList);
    }

    inline QDBusPendingReply<> show()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("show"), argumentList);
    }

    inline QDBusPendingReply<qulonglong> winId()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("winId"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void accepted();
    void destroyed();
    void finished(int result);
    void rejected();
    void windowActiveChanged();
};

namespace com {
  namespace deepin {
    namespace filemanager {
      typedef ::ComDeepinFilemanagerFiledialogInterface filedialog;
    }
  }
}
#endif
